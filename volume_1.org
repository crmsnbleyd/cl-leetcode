#+title: Common Lisp solutions to problems 1 to y
#+author: Arnav Andrew Jose

* 1. Two Sum
A fairly simple optimised solution (algorithmically, at least. Not sure if idiomatic CL) that uses hash-table.
Checks if the target is the double of the current number and only returns if another instance of the number exists in the input list.

#+BEGIN_SRC lisp :tangle solutions/two-sum.lisp
  (defun two-sum (nums target)
    (let ((hash (make-hash-table))
	  (iter-hash-item nil))
      (loop for x in nums and idx from 0
	    do (setf (gethash x hash) (cons idx (gethash x hash))))
      (loop for k being each hash-key of hash
	    do (when (setf iter-hash-item (gethash (- target k) hash))
		 (unless (and (= target (* k 2)) (not (cdr iter-hash-item)))
		   (return-from two-sum (car iter-hash-item)))))))
#+END_SRC

* 2. Add Two Numbers
Lisp already has linked lists, isn't that swell? I would like to do this recursively, but the ANSI standard does not specify Tail Call Optimization, and so I shall search for a LOOP based solution.
#+BEGIN_SRC lisp :tangle solutions/add-two-numbers.lisp
  (defun add-numbers (a b)
    "a and b are linked lists representing
  two numbers, where every cons cell has
  a single digit, and the number is
  reversed."
    (let
	((n (min (length a) (length b)))
	 (carry 0)
	 (retlist nil))
      (loop for i from 0 to (1- n)
	    for x = a then (cdr x)
	    for y = b then (cdr y)
	    do
	       (setf retlist
		     (cons (mod (+ carry (car a) (car b)) 10) retlist))
	       (setf carry (max 0 (- (+ carry (car a) (car b)) 10))))
      )
    retlist)
#+END_SRC

* 3. Longest Substring Without Repeating Characters
A pretty ugly, procedural solution translated directly from one written in Python. This wouldn't fly in Scheme or Clojure.
I kept running into arcane errors because I was using `do` instead of  `progn`.

#+BEGIN_SRC lisp :tangle solutions/largest-substring.lisp
  (defun longest-substr (s)
    (let ((longest 0)
	  (curr 0)
	  (start 0)
	  (seen (make-hash-table))
	  (len (length s)))
      (loop for idx from 0 to (- len 1) do
	(if (gethash (char s idx) seen)
	    (progn
	     (setf longest (max longest curr))
	     (loop while (char/= (char s start) (char s idx)) do
	       (remhash (char s start) seen)
	       (incf start))
	      (incf start)
	      (setf curr (+ 1 (- idx start))))
	    (progn
	     (setf (gethash (char s idx) seen) t)
	     (incf curr))))
      (setf longest (max longest curr))
      longest))
#+END_SRC

* 4. Median of Two Sorted Arrays
Leetcode hard. A binary search problem.

#+begin_src lisp :tangle solutions/two-median.lisp
  (defun median (vec1 vec2)
    "vec1 is a longer vector than vec2"
    (let ((n1 (length vec1))
	  (n2 (length vec2))
	  (low 0)
	  (high (length vec1))
	  (idx1 nil)
	  (idx2 nil)
	  (left1 nil)
	  (left2 nil)
	  (right1 nil)
	  (right2 nil))
      (loop :while (<= low high)
	    :do
	       (setf idx1 (floor (+ low high) 2))
	       (setf idx2 (- (floor (+ n1 n2 1) 2) idx1))
	       (setf left1 (if (zerop idx1)
			       most-negative-fixnum
			       (aref vec1 (- idx1 1))))
	       (setf left2 (if (zerop idx2)
			       most-negative-fixnum
			       (aref vec2 (- idx2 1))))
	       (setf right1 (if (= n1 idx1)
				most-positive-fixnum
				(aref vec1 idx1)))
	       (setf right2 (if (= n2 idx2)
				most-positive-fixnum
				(aref vec2 idx2)))
	       (cond
		 ((and (<= left1 right2) (<= left2 right1))
		  (return-from solve
		    (if (zerop (mod (+ n1 n2) 2))
			(/ (+ (max left1 left2) (min right1 right2)) 2)
			(max left1 left2)))
		  (> left1 right2)
		  (setf high (- idx1 1))
		  t (setf low (+ idx1 1))))))
    0.0)

  (defun find-median (vec1 vec2)
    (if (< (length vec1) (length vec2))
	(median vec2 vec1)
	(median vec1 vec2)))
#+end_src

* 5. Longest Palindrome
I found out the hard way that 0 is truthy. If :initial-element is not used, the new array is all zeroes.
#+begin_src lisp :tangle solutions/longest-palindrome.lisp
  (defun longest-palindrome (s)
    (let* ((n (length s))
	   (dp (make-array (list n n) :initial-element nil))
	   (start 0)
	   (retval 1))
      (when (zerop n) (return-from longest-palindrome ""))
      (loop :for i :from 0 :below n
	    :do
	       (setf (aref dp i i) t)
	       (unless (= i (1- n))
		 (setf (aref dp i (1+ i))
		       (when
			   (char= (char s i) (char s (1+ i)))
			 (setf start i)
			 (setf retval 2)
			 t))))
      (loop :with k = 3
	    :while (<= k n)
	    :do
	       (loop :with i = 0
		     :while (< i (1+ (- n k)))
		     :for j = (1- (+ i k))
		     :do
			(when
			    (and (aref dp (1+ i) (1- j))
				 (char= (char s i) (char s j)))
			  (setf (aref dp i j) t)
			  (when (> k retval)
			    (setf start i)
			    (setf retval k)))
			(incf i))
	       (incf k))
      (subseq s start (+ start retval))))
#+end_src

* 6. Zigzag conversion
Use of ~apply~ and first-class functions. To generalize to ~n~ buckets, you would use an array.
#+begin_src lisp :tangle solutions/zigzag-conversion.lisp
(defun zigzag (strinput)
  (let ((bucket0 (list))
	(bucket1 (list))
	(bucket2 (list))
	(counter 0)
	(fn '+))
    (loop :for c :across strinput
	  :do
	     (cond
	       ((= counter 0)
		(setf bucket0 (cons c bucket0)))
	       ((= counter 1)
		(setf bucket1 (cons c bucket1)))
	       ((= counter 2)
		(setf bucket2 (cons c bucket2))))
	     (cond
	       ((and (zerop counter) (eq '- fn))
		(setf fn '+))
	       ((and (= 2 counter) (eq '+ fn))
		(setf fn '-)))
	     (setf counter (funcall fn counter 1)))
    (reverse-join bucket0 bucket1 bucket2)))

(defun reverse-join (&rest lists)
  (apply 'concatenate 'string
	 (map
	  'list
	  (lambda (l) (concatenate 'string (reverse l)))
	  lists)))
#+end_src

* 7. Reverse Integer
Use of ~return-from~ and ~finally~ in loop macro. ~princ-to-string~ is much better to use than ~format nil "~A"~
#+begin_src lisp :tangle solutions/reverse-integer.lisp
  (defun reverse-integer (input)
    (let ((tentative-result (tentative-solve input)))
      (if (validate-solution tentative-result)
	  tentative-result
	  "-1")))

  (defvar outer-limit
    (let ((maxhalf (expt 2 31)))
      (+ maxhalf (1- maxhalf))))

  (defun validate-solution (strinput)
    (if (eq strinput (actually-solve outer-limit))
	nil
	(let ((inp (reverse (string-left-trim "-" strinput))))
	  (cond
	    ((> (length inp) 10) nil)
	    ((< (length inp) 10) t)
	    (t
	     (loop :for ichar :across inp
		   :for l :across (princ-to-string outer-limit)
		   :do
		      (cond
			((char> ichar l)
			 (return-from validate-solution nil))
			((char< ichar l)
			 (return-from validate-solution t)))
		   :finally
		      (return t)))))))

  (defun tentative-solve (numinput)
    (if (> 0 numinput)
	(concatenate 'string "-"
		     (actually-solve (* -1 numinput)))
	(actually-solve numinput)))

  (defun actually-solve (numinput)
    (reverse (princ-to-string numinput)))
#+end_src
