#+title: Common Lisp solutions to problems 1 to y
#+author: Arnav Andrew Jose

* 1. Two Sum
A fairly simple optimised solution (algorithmically, at least.Not sure if idiomatic CL)
that uses hash-table. Checks if the target is the double of the current number and
only returns if another instance of the number exists in the input list.
#+BEGIN_SRC lisp :tangle solutions/two-sum.lisp
  (defun two-sum (nums target)
    (let ((hash (make-hash-table))
	  (iter-hash-item nil))
      (loop for x in nums and idx from 0
	    do (setf (gethash x hash) (cons idx (gethash x hash))))
      (loop for k being each hash-key of hash
	    do (when (setf iter-hash-item (gethash (- target k) hash))
		 (unless (and (= target (* k 2)) (not (cdr iter-hash-item)))
		   (return-from two-sum (car iter-hash-item)))))))
#+END_SRC

* 2. Add Two Numbers
Lisp already has linked lists, isn't that swell? I would like to do this recursively, but the ANSI standard does not specify Tail Call Optimization, and so I shall search for a LOOP based solution.
#+BEGIN_SRC lisp :tangle solutions/add-two-numbers.lisp
  (defun add-numbers (a b)
    "a and b are linked lists representing
  two numbers, where every cons cell has
  a single digit, and the number is
  reversed."
    (let
	((n (min (length a) (length b)))
	 (carry 0)
	 (retlist nil))
      (loop for i from 0 to (1- n)
	    for x = a then (cdr x)
	    for y = b then (cdr y)
	    do
	       (setf retlist
		     (cons (mod (+ carry (car a) (car b)) 10) retlist))
	       (setf carry (max 0 (- (+ carry (car a) (car b)) 10)))))
    retlist)
#+END_SRC

* 3. Longest Substring Without Repeating Characters
Earlier [[https://github.com/crmsnbleyd/cl-leetcode/commit/a4ff57de2d306a5dcf32e94fdb5d43b9dca77308#diff-e31b3b3d3d4093a216fd8c5c908b619c6b264aa28867d2b67f74f3b9ce91c031][solution]] was kind of ugly, so here's one with better use of loop keywords.
#+BEGIN_SRC lisp :tangle solutions/longest-substring.lisp
  (defun longest-substring (s)
    (loop :with start = 0
	  :with res = ""
	  :with seen = (make-hash-table)
	  :for i :below (length s)
	  :if (gethash (char s i) seen)
	    :do
	       (loop
		 :for curr :from start :below i
		 :while (char/= (char s curr) (char s i))
		 :do (remhash (char s curr) seen)
		 :finally (setf start (1+ curr)))
	  :else
	    :do (setf (gethash (char s i) seen) t)
	  :when (> (1+ (- i start)) (length res))
	     :do (setf res (subseq s start (1+ i)))
	  :finally (return res)))
#+END_SRC

* 4. Median of Two Sorted Arrays
Leetcode hard. A binary search problem.
#+begin_src lisp :tangle solutions/two-median.lisp
  (defun median (vec1 vec2)
    "vec1 is a longer vector than vec2"
    (let ((n1 (length vec1))
	  (n2 (length vec2))
	  (low 0)
	  (high (length vec1))
	  (idx1 nil)
	  (idx2 nil)
	  (left1 nil)
	  (left2 nil)
	  (right1 nil)
	  (right2 nil))
      (loop :while (<= low high)
	    :do
	       (setf idx1 (floor (+ low high) 2))
	       (setf idx2 (- (floor (+ n1 n2 1) 2) idx1))
	       (setf left1 (if (zerop idx1)
			       most-negative-fixnum
			       (aref vec1 (- idx1 1))))
	       (setf left2 (if (zerop idx2)
			       most-negative-fixnum
			       (aref vec2 (- idx2 1))))
	       (setf right1 (if (= n1 idx1)
				most-positive-fixnum
				(aref vec1 idx1)))
	       (setf right2 (if (= n2 idx2)
				most-positive-fixnum
				(aref vec2 idx2)))
	       (cond
		 ((and (<= left1 right2) (<= left2 right1))
		  (return-from solve
		    (if (zerop (mod (+ n1 n2) 2))
			(/ (+ (max left1 left2) (min right1 right2)) 2)
			(max left1 left2)))
		  (> left1 right2)
		  (setf high (- idx1 1))
		  t (setf low (+ idx1 1))))))
    0.0)

  (defun find-median (vec1 vec2)
    (if (< (length vec1) (length vec2))
	(median vec2 vec1)
	(median vec1 vec2)))
#+end_src

* 5. Longest Palindrome
I found out the hard way that 0 is truthy. If :initial-element is not used, the new array is all zeroes.
#+begin_src lisp :tangle solutions/longest-palindrome.lisp
  (defun longest-palindrome (s)
    (let* ((n (length s))
	   (dp (make-array (list n n) :initial-element nil))
	   (start 0)
	   (retval 1))
      (when (zerop n) (return-from longest-palindrome ""))
      (loop :for i :from 0 :below n
	    :do
	       (setf (aref dp i i) t)
	       (unless (= i (1- n))
		 (setf (aref dp i (1+ i))
		       (when
			   (char= (char s i) (char s (1+ i)))
			 (setf start i)
			 (setf retval 2)
			 t))))
      (loop :with k = 3
	    :while (<= k n)
	    :do
	       (loop :with i = 0
		     :while (< i (1+ (- n k)))
		     :for j = (1- (+ i k))
		     :do
			(when
			    (and (aref dp (1+ i) (1- j))
				 (char= (char s i) (char s j)))
			  (setf (aref dp i j) t)
			  (when (> k retval)
			    (setf start i)
			    (setf retval k)))
			(incf i))
	       (incf k))
      (subseq s start (+ start retval))))
#+end_src

* 6. Zigzag conversion
Use of circular lists! To generalize to ~n~ buckets, you would use an array.
#+begin_src lisp :tangle solutions/zigzag-conversion.lisp
  (defun zigzag (strinput)
    (let ((bucket0 (list))
	  (bucket1 (list))
	  (bucket2 (list)))
      (loop :for c :across strinput
	    :for counter :in '#1=(0 1 2 1 . #1#)
	    :do
	       (cond
		 ((= counter 0)
		  (setf bucket0 (cons c bucket0)))
		 ((= counter 1)
		  (setf bucket1 (cons c bucket1)))
		 ((= counter 2)
		  (setf bucket2 (cons c bucket2)))))
      (reverse-join bucket0 bucket1 bucket2)))

  (defun reverse-join (&rest lists)
    (apply 'concatenate 'string
	   (map
	    'list
	    (lambda (l) (concatenate 'string (reverse l)))
	    lists)))
#+end_src

* 7. Reverse Integer
Use of ~return-from~ and ~finally~ in loop macro. ~princ-to-string~ is much better to use than ~format nil "~A"~
#+begin_src lisp :tangle solutions/reverse-integer.lisp
  (defun reverse-integer (input)
    (let ((tentative-result (tentative-solve input)))
      (if (validate-solution tentative-result)
	  tentative-result
	  "-1")))

  (defvar outer-limit
    (let ((maxhalf (expt 2 31)))
      (+ maxhalf (1- maxhalf))))

  (defun validate-solution (strinput)
    (if (eq strinput (actually-solve outer-limit))
	nil
	(let ((inp (reverse (string-left-trim "-" strinput))))
	  (cond
	    ((> (length inp) 10) nil)
	    ((< (length inp) 10) t)
	    (t
	     (loop :for ichar :across inp
		   :for l :across (princ-to-string outer-limit)
		   :do
		      (cond
			((char> ichar l)
			 (return-from validate-solution nil))
			((char< ichar l)
			 (return-from validate-solution t)))
		   :finally
		      (return t)))))))

  (defun tentative-solve (numinput)
    (if (> 0 numinput)
	(concatenate 'string "-"
		     (actually-solve (* -1 numinput)))
	(actually-solve numinput)))

  (defun actually-solve (numinput)
    (reverse (princ-to-string numinput)))
#+end_src

* 8. Atoi
Another question where we act as good sports and pretend common lisp only has 32-bit integers.
Shows off ~defconstant~, ~read-from-string~, and literal whitespace characters.
#+begin_src lisp :tangle solutions/atoi.lisp
(defconstant min-integer-string "-2147483648")
(defconstant max-integer-string "+2147483647")

(defun atoi (strinput)
  (read-from-string (clamp (sign-and-digits strinput))))

(defun remove-leading-whitespace (strinput)
  (string-left-trim '(#\Space #\TAB #\Newline) strinput))

(defun sign-and-digits (strinput)
  (let*
      ((trimmed (remove-leading-whitespace strinput))
       (sign-maybe (aref trimmed 0))
       (sign (cond
	       ((char= sign-maybe #\+) #\+)
	       ((char= sign-maybe #\-) #\-)
	       (t #\+)))
       (rest (string-left-trim "+-0" trimmed)))
    (cons sign
    (loop :for ch :across rest
	  :while (digit-char-p ch)
	  :collect ch))))

(defun clamp (normalised-list)
  (let* ((sign (car normalised-list))
	 (digits (cdr normalised-list))
	 (comparing-to
	   (string-left-trim
	    "+-"
	    (if
	     (char= sign #\+)
	     max-integer-string
	     min-integer-string)))
	 (diglen (length digits))
	 (complen (length comparing-to)))
    (cond
      ((< diglen complen)
       (concatenate 'string normalised-list))
      ((> diglen complen)
       (concatenate 'string `(,sign) comparing-to))
      (t
       (loop :for digit :in digits
	     :for c :across comparing-to
	     :when (char> digit c)
	       :return (concatenate 'string `(,sign) comparing-to)
	     :when (char< digit c)
	       :return (concatenate 'string normalised-list)
	     :finally
		(concatenate 'string `(,sign) comparing-to))))))
#+end_src

* 9. Palindrome number
Horrible question
#+begin_src lisp :tangle solutions/palindrome-number.lisp
  (defun palindrome-number (intinput)
    (if (< intinput 0)
	nil
      (let (s (princ-to-string intinput))
	(eq s (reverse s)))))
#+end_src

* 10. Regular expressions
You could do this with the excellent [[https://github.com/isoraqathedh/cl-simple-fsm/][finite-state-machine]] library,
but I'm trying to achieve as much as I can without using quicklisp.
Here we see our first recursive solution.
Using a :keyword as a pseudo-option type.
#+begin_src lisp :tangle solutions/regular-expression.lisp
  (defun small-matcher (expr s)
    (cond
      ((string= s expr)
       t)
      ((string= expr "")
       nil)
      ((and (string= s "")
	    (char= (aref expr 1) #\*))
       t)
      ((string= s "")
       nil)
      ((and (= (length s) 1) (string= expr "."))
       t)
      ((= (length expr) 1)
       nil)
      (t :continue)))

  (defun is-match (expr s)
    (let ((matchres (small-matcher expr s)))
      (if
       (not (eq matchres :continue))
       matchres
       (if
	(char/= #\* (aref expr 1))
	(if (or
	     (char= (aref expr 0) #\.)
	     (char= (aref expr 0) (aref s 0)))
	    (is-match
	     (subseq expr 1)
	     (subseq s 1))
	    nil)
	(if
	 (or
	  (char= (aref expr 0) #\.)
	  (char= (aref expr 0)
		 (aref s 0)))
	 (or
	  (is-match expr
		    (subseq s 1))
	  (is-match (subseq expr 2)
		    (subseq s 1)))
	 (is-match (subseq expr 2) s))))))
#+end_src

* 11. Container with water
Greedy algorithm, first use of vectors
in this series
#+begin_src lisp :tangle solutions/container-with-water.lisp
  (defun container-with-water (bars)
    "find the maximum amount of water that can be
  fit between any two bars in the vector BARS."
    (loop :with start = 0
	  :with end = (1- (length bars))
	  :with curmax = 0
	  :while (<= start end)
	  :do
	     (setf curmax
		   (max curmax
			(* (- end start)
			   (min (aref bars start)
				(aref bars end)))))
	  :if (< (aref bars start)
		 (aref bars end))
	    :do (setf start (1+ start))
	  :else
	    :do (setf end (1- end))
	  :finally
	     (return curmax)))
#+end_src
* 12. Integer to roman
If it looks stupid but it works, it's not stupid.
#+begin_src lisp :tangle solutions/integer-to-roman.lisp
  (defun integer-to-roman (intinput &optional (acc ""))
    (cond
      ((> intinput 4000)
       (error "Values larger than 4000 not supported"))
      ((>= intinput 1000)
       (integer-to-roman
	(- intinput 1000)
	(concatenate 'string acc "M")))
      ((>= intinput 900)
       (integer-to-roman
	(- intinput 900)
	(concatenate 'string acc "CM")))
      ((>= intinput 500)
       (integer-to-roman
	(- intinput 500)
	(concatenate 'string acc "D")))
      ((>= intinput 400)
       (integer-to-roman
	(- intinput 400)
	(concatenate 'string acc "CD")))
      ((>= intinput 100)
       (integer-to-roman
	(- intinput 100)
	(concatenate 'string acc "C")))
      ((>= intinput 90)
       (integer-to-roman
	(- intinput 90)
	(concatenate 'string acc "XC")))
      ((>= intinput 50)
       (integer-to-roman
	(- intinput 50)
	(concatenate 'string acc "L")))
      ((>= intinput 40)
       (integer-to-roman
	(- intinput 40)
	(concatenate 'string acc "XL")))
      ((>= intinput 10)
       (integer-to-roman
	(- intinput 10)
	(concatenate 'string acc "X")))
      ((>= intinput 9)
       (integer-to-roman
	(- intinput 9)
	(concatenate 'string acc "IX")))
      ((>= intinput 5)
       (integer-to-roman
	(- intinput 5)
	(concatenate 'string acc "V")))
      ((>= intinput 4)
       (integer-to-roman
	(- intinput 4)
	(concatenate 'string acc "IV")))
      ((>= intinput 1)
       (integer-to-roman
	(- intinput 1)
	(concatenate 'string acc "I")))
      (t acc)))
#+end_src
* 13. Roman to integer
Using destructuring within the loop macro to great effect.
#+begin_src lisp :tangle solutions/roman-to-integer.lisp
  (defun string-prefix? (prefix str)
    (if (< (length str) (length prefix))
	nil
	(loop :for pchar :across prefix
	      :for schar :across str
	      :when (char/= pchar schar)
		:return nil
	      :finally (return t))))

  (defun roman-to-integer (roman-string)
    (loop :with sum = 0
	  :with str = roman-string
	  :do
	     (loop :for (prefix . value)
		     :in
		   '(("IV" . 4)
		     ("IX" . 9)
		     ("XL" . 40)
		     ("XC" . 90)
		     ("CD" . 400)
		     ("CM" . 900)
		     ("I"  . 1)
		     ("V"  . 5)
		     ("X"  . 10)
		     ("L"  . 50)
		     ("C"  . 100)
		     ("D"  . 500)
		     ("M"  . 1000))
		   :when (string-prefix? prefix str)
		     :do (setf sum (+ sum value))
			 (setf str (subseq str (length prefix)))
			 (return))
	  :when (string= str "")
	    :return sum))
#+end_src
* 14. Longest common prefix
First use of reduce and also of :always clause in loop macro.
Always corresponds to something like ~all()~ in python.
We don't have generators by default in Common Lisp and so
will have to resort to using the loop macro for all of this stuff.
#+begin_src lisp :tangle solutions/longest-common-prefix.lisp
  (defun min-length (strings)
    (reduce
     (lambda (a b) (min a (length b)))
     strings
     :initial-value most-positive-fixnum))

  (defun longest-common-prefix (strings)
    (cond
      ((eq strings nil)
       nil)
      ((= (length strings) 1)
       (car strings))
      (t
       (loop
	 :with res = (min-length strings)
	 :for end :from (1- res) :downto 0
	 :for compchar = (char (car strings) end)
	 :unless
	 (loop :for str :in strings
	       :always
	       (char=
		(char str end)
		compchar))
	 :do (setf res end)
	 :finally
	    (return
	      (subseq (car strings) 0 res))))))
#+end_src

* 15. Three sum
Keyword arguments, docstrings, and lots of hash tables.
#+begin_src lisp :tangle solutions/three-sum.lisp
  (defun unique-list (l &key (test 'eql))
    "Return all unique elements of list L."
    (loop
      :with res = (make-hash-table :test test)
      :for item :in l
      :unless (gethash item res)
	:collect item
      :do (setf (gethash item res) t)))

  (defun three-sum (vec target)
    "Generate list of all unique triplets from VEC that sum
  up to TARGET."
    (let ((dp (make-hash-table)))
      (loop :for i :below (1- (length vec))
	    :do
	       (loop :for j :from (1+ i)
		       :below (length vec)
		     :for idash = (aref vec i)
		     :for jdash = (aref vec j)
		     :for currsum = (+ idash jdash)
		     :do
			(setf
			 (gethash currsum dp)
			 (if
			  (eq nil (gethash currsum dp))
			  (list (list i j))
			  (cons (list i j)
				(gethash currsum dp))))))
      (unique-list
       (loop :for i :below (length vec)
	     :for item = (aref vec i)
	     :for target-list = (gethash (- target item) dp)
	     :collect
	     (loop :for pair :in target-list
		   :unless (member i pair)
		     :return (sort (cons i pair) '<)))
       :test 'equal)))
#+end_src
